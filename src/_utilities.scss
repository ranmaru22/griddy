/*
 * This file contains utility functions that can be imported and used in
 * other modules.
 */

@use "../user.config" as user;
@use "sass:selector";
@use "sass:string";
@use "sass:list";

@function has-breakpoints($selector) {
  @if string.index(#{list.nth($selector, 1)}, ".sm") or
    string.index(#{list.nth($selector, 1)}, ".md") or
    string.index(#{list.nth($selector, 1)}, ".lg") or
    string.index(#{list.nth($selector, 1)}, ".xl")
  {
    @return true;
  }
  @return false;
}

@function has-pseudo-selector($selector) {
  @if string.index(#{list.nth($selector, 1)}, "active") or
    string.index(#{list.nth($selector, 1)}, "hover") or
    string.index(#{list.nth($selector, 1)}, "visited") or
    string.index(#{list.nth($selector, 1)}, "focus") or
    string.index(#{list.nth($selector, 1)}, "disabled")
  {
    @return true;
  }
  @return false;
}

@function is-class($selector) {
  @return string.slice(#{list.nth($selector, 1)}, 1, 1) == ".";
}

@function get-breakpoint($selector) {
  @if has-breakpoints($selector) {
    @return string.slice(#{list.nth($selector, 1)}, 2, 3);
  } @else {
    @return "";
  }
}

@function get-pseudo-selector($selector) {
  @if has-pseudo-selector($selector) {
    $colon: string.index(#{list.nth($selector, 1)}, ":");
    @return string.slice(#{list.nth($selector, 1)}, 2, $colon - 1);
  } @else {
    @return "";
  }
}

@function parse-selector-string($selector) {
  @if is-class($selector) {
    @return string.slice(#{list.nth($selector, 1)}, 2, -1);
  } @else {
    @return $selector;
  }
}

@function get-base-selector($selector) {
  @if is-class($selector) {
    @if has-breakpoints($selector) and has-pseudo-selector($selector) {
      $bp-separator: string.index(#{list.nth($selector, 1)}, ":");
      $bp-removed: string.slice(#{list.nth($selector, 1)}, $bp-separator + 1);
      @return get-base-selector("." + #{$bp-removed});
    } @else if has-breakpoints($selector) {
      $bp-separator: string.index(#{list.nth($selector, 1)}, ":");
      @return string.slice(#{list.nth($selector, 1)}, $bp-separator + 1);
    } @else if has-pseudo-selector($selector) {
      $pc-separator: string.index(#{list.nth($selector, 1)}, ":");
      $prefix-removed: string.slice(
        #{list.nth($selector, 1)},
        $pc-separator + 1
      );
      $colon: string.index($prefix-removed, ":");
      @return string.slice($prefix-removed, 1, $colon - 1);
    }
    @return parse-selector-string($selector);
  }
  @return #{$selector};
}

@mixin add-pseudo-classes($selector, $classes...) {
  // Adds pseudo classes to a given selector.
  @content;
  @each $class in $classes {
    @if has-breakpoints($selector) {
      $breakpoint: get-breakpoint($selector);
      @at-root .#{$breakpoint}\:#{$class}\:#{get-base-selector($selector)}:#{$class} {
        @content;
      }
    } @else {
      @at-root .#{$class}\:#{get-base-selector($selector)}:#{$class} {
        @content;
      }
    }
  }
}

@mixin add-breakpoints($selector) {
  // Adds breakpoints to a given selector.
  @content;
  @each $label, $breakpoint in user.$breakpoints {
    @at-root .#{$label}\:#{parse-selector-string($selector)} {
      @media screen and (min-width: $breakpoint) {
        @content;
      }
    }
  }
}

@mixin add-pseudo-classes-with-breakpoints($selector, $classes...) {
  // Adds pseudo-classes at each breakpoint to a given selector.
  @include add-pseudo-classes($selector, $classes...) {
    @content;
  }
  @each $label, $breakpoint in user.$breakpoints {
    @if string.slice(#{list.nth($selector, 1)}, 1, 1) == "." {
      @at-root .#{$label}\:#{string.slice(#{list.nth($selector, 1)}, 2, -1)} {
        @media screen and (min-width: $breakpoint) {
          @content;
          @each $class in $classes {
            @at-root .#{$label}\:#{$class}\:#{selector.append(string.slice(#{list.nth($selector, 1)}, 2, -1), ":" + $class)} {
              @content;
            }
          }
        }
      }
    } @else {
      @at-root .#{$label}\:#{$selector} {
        @media screen and (min-width: $breakpoint) {
          @content;
          @each $class in $classes {
            @at-root .#{$label}\:#{$class}\:#{selector.append($selector, ":" + $class)} {
              @content;
            }
          }
        }
      }
    }
  }
}
