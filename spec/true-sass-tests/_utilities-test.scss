@use "../../src/utilities" as utils;
@use "../../user.config" as user;

@include describe("has-breakpoints function") {
  @include it("returns true if selector has a breakpoint class") {
    @include assert-true(utils.has-breakpoints(".sm\:foobar"));
  }
  @include it("returns false if selector has no breakpoint class") {
    @include assert-false(utils.has-breakpoints(".foobar"));
  }
}

@include describe("has-pseudo-selector function") {
  @include it("returns true if selector has a pseudo-selector class") {
    @include assert-true(utils.has-pseudo-selector(".hover\:foobar"));
  }
  @include it("returns false if selector has no pseudo-selector class") {
    @include assert-false(utils.has-pseudo-selector(".foobar"));
  }
}

@include describe("is-class function") {
  @include it("returns true if selector starts with a period") {
    @include assert-true(utils.is-class(".sm\:foobar"));
  }
  @include it("returns false if selector does not start with a period") {
    @include assert-false(utils.is-class("foobar"));
  }
}

@include describe("get-breakpoint function") {
  @include it("returns breakpoint class selector") {
    @include assert-equal(utils.get-breakpoint(".sm\:foobar"), "sm");
  }
  @include it("returns empty string if no breakpoint is set") {
    @include assert-equal(utils.get-breakpoint(".foobar"), "");
  }
}

@include describe("get-pseudo-selector function") {
  @include it("returns pseudo-selector if present") {
    @include assert-equal(utils.get-pseudo-selector(".hover\:foobar"), "hover");
  }
  @include it("returns empty string if no pseudo-selector is set") {
    @include assert-equal(utils.get-pseudo-selector(".foobar"), "");
  }
}

@include describe("parse-selector-string function") {
  @include it("returns class selectors without leading period") {
    @include assert-equal(#{utils.parse-selector-string(".foobar")}, "foobar");
  }
  @include it("returns normal selectors as is") {
    @include assert-equal(#{utils.parse-selector-string("input")}, "input");
  }
}

@include describe("get-base-selector function") {
  @include it("returns class selectors without leading period") {
    @include assert-equal(#{utils.get-base-selector(".foobar")}, "foobar");
  }
  @include it("returns normal selectors as is") {
    @include assert-equal(#{utils.get-base-selector("input")}, "input");
  }
  @include it("strips breakpoint selectors") {
    @include assert-equal(#{utils.get-base-selector(".sm:foobar")}, "foobar");
  }
  @include it("strips pseudo-class selectors") {
    @include assert-equal(
      #{utils.get-base-selector(".hover:foobar:hover")},
      "foobar"
    );
  }
  @include it("strips pseudo-class and breakpoint selectors") {
    @include assert-equal(
      #{utils.get-base-selector(".sm:hover:foobar:hover")},
      "foobar"
    );
  }
}

@include describe("add-pseudo-classes mixin") {
  @include it("sets the selectors correctly") {
    @include assert {
      @include output {
        @include utils.add-pseudo-classes(&, "hover") {
          color: mistyrose;
        }
      }
      @include expect {
        & {
          color: mistyrose;
        }
        @at-root .hover\:test-output:hover {
          color: mistyrose;
        }
      }
    }
  }
  @include it("works with built-in selectors too") {
    @include assert {
      @include output {
        @include utils.add-pseudo-classes(div, "hover") {
          color: mistyrose;
        }
      }
      @include expect {
        & {
          color: mistyrose;
        }
        @at-root .hover\:div:hover {
          color: mistyrose;
        }
      }
    }
  }
}

@include describe("add-breakpoints mixin") {
  @include it("sets the selectors correctly") {
    @include assert {
      @include output {
        @include utils.add-breakpoints(&) {
          margin: 0;
        }
      }
      @include expect {
        & {
          margin: 0;
        }
        @media screen and (min-width: map-get(user.$breakpoints, "sm")) {
          @at-root .sm\:test-output {
            margin: 0;
          }
        }
        @media screen and (min-width: map-get(user.$breakpoints, "md")) {
          @at-root .md\:test-output {
            margin: 0;
          }
        }
        @media screen and (min-width: map-get(user.$breakpoints, "lg")) {
          @at-root .lg\:test-output {
            margin: 0;
          }
        }
        @media screen and (min-width: map-get(user.$breakpoints, "xl")) {
          @at-root .xl\:test-output {
            margin: 0;
          }
        }
      }
    }
  }

  @include it("works with built-in selectors") {
    @include assert {
      @include output {
        @include utils.add-breakpoints(div) {
          margin: 0;
        }
      }
      @include expect {
        & {
          margin: 0;
        }
        @media screen and (min-width: map-get(user.$breakpoints, "sm")) {
          @at-root .sm\:div {
            margin: 0;
          }
        }
        @media screen and (min-width: map-get(user.$breakpoints, "md")) {
          @at-root .md\:div {
            margin: 0;
          }
        }
        @media screen and (min-width: map-get(user.$breakpoints, "lg")) {
          @at-root .lg\:div {
            margin: 0;
          }
        }
        @media screen and (min-width: map-get(user.$breakpoints, "xl")) {
          @at-root .xl\:div {
            margin: 0;
          }
        }
      }
    }
  }

  @include it("works with selectors that have pseudo-classes") {
    @include assert {
      @include output {
        @include utils.add-breakpoints(".focus\:foobar:focus") {
          margin: 0;
        }
      }
      @include expect {
        & {
          margin: 0;
        }
        @media screen and (min-width: map-get(user.$breakpoints, "sm")) {
          @at-root .sm\:focus:foobar:focus {
            margin: 0;
          }
        }
        @media screen and (min-width: map-get(user.$breakpoints, "md")) {
          @at-root .md\:focus:foobar:focus {
            margin: 0;
          }
        }
        @media screen and (min-width: map-get(user.$breakpoints, "lg")) {
          @at-root .lg\:focus:foobar:focus {
            margin: 0;
          }
        }
        @media screen and (min-width: map-get(user.$breakpoints, "xl")) {
          @at-root .xl\:focus:foobar:focus {
            margin: 0;
          }
        }
      }
    }
  }
}
